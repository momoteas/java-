3.1 一个简单的java程序
    > 大小写敏感；
    > 关键字public被称为访问修饰符(access modifier),它用于控制程序的其他部分对这段代码的访问级别；
    > 标准的命名规范为:类名是以大写字母开头的名词。如果名字由多个单词组成,每个单词的第一个字母都应该为大写。(这种在一个单词间使用大写字母的方
      式被称为“camel case”,以它自己为例,应该写成“CamelCase”。)
    > 源代码的文件名必须与公有类的名字相同,并用.java作为扩展名。因此,存储这段源代码的文 件名必须为 FirstSample.java;

3.2 注释：
    > 三种注释方法：//; /*...*/;
  
3.3 数据类型：
    > Java是一种强类型语言（strongly typed language）。这就意味着必须为每一个变量声明一种类型;
    > 在Java中，一共有8种基本类型（primitive type），其中有4个整型、2个浮点类型、1个用于表示Unicode编码的字符单元的字符类型char（请参见论述char类型
      的章节）和1个用于表示真值的boolean类型;
    > float类型的数值有一个后缀F（例如，3.402F）。没有后缀F的浮点数值（如3.402）默认为double类型;
    > 代码点（code point）是指与一个编码表中的某个字符对应的代码值;

3.4 变量：
    > 初始化变量：声明一个变量之后，必须利用赋值语句对变量进行显式初始化，千万不要使用一个未被初始化的变量；
    > 在Java中可以将声明放在代码中的任何地方; 在Java中，变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格;
    > 常量：在Java中，利用关键字final声明常量；关键字final表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用大写；

3.5 运算符：
    > 在处理整型数值时，可以直接对组成整型数值的各个位进行操作。这意味着可以使用屏蔽技术获得整数中的各个位。位运算符包括:
      &（“与”）、|（“或”）、^（“异或”）、~（“非”); 
      还有“>>”和“<<”运算符，它们将二进制位右移或左移;
      最后，>>> 运算符将用0填充前面的位；>> 运算符用符号位填充左侧的位。没有<<< 运算符;
    > 类型转换：强制类型转换将通过截断小数部分来把一个浮点值转换为整型；
    > 枚举类型：有些时候，变量的取值仅在一个有限的集合内
    
3.6 字符串：
    > 从概念上讲，Java字符串就是Unicode字符序列。例如，串“Java\u2122”由5个Unicode字符J、a、v、a和™组成。Java 没有内置的字符串类型，而是在标准
      Java类库中提供了一个预定义类String。每个用双引号括起来的字符串都是String类的一个实例;
    > 3.6.1 代码点与代码单元：
        > 点类型、1个用于表示Unicode编码的字符单元的字符类型char（请参见论述char类型      的章节）和1个用于表示真值的boolean类型;
    > float类型的数值有一个后缀F（例如，3.402F）。没有后缀F的浮点数值（如3.402）默认为double类型;
    > 代码点（code point）是指与一个编码表中的某个字符对应的代码值;

3.4 变量：
    > 初始化变量：声明一个变量之后，必须利用赋值语句对变量进行显式初始化，千万不要使用一个未被初始化的变量；
    > 在Java中可以将声明放在代码中的任何地方; 在Java中，变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格;
    > 常量：在Java中，利用关键字final声明常量；关键字final表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用大写；

3.5 运算符：
    > 在处理整型数值时，可以直接对组成整型数值的各个位进行操作。这意味着可以使用屏蔽技术获得整数中的各个位。位运算符包括:
      &（“与”）、|（“或”）、^（“异或”）、~（“非”); 
      还有“>>”和“<<”运算符，它们将二进制位右移或左移;
      最后，>>> 运算符将用0填充前面的位；>> 运算符用符号位填充左侧的位。没有<<< 运算符;
    > 类型转换：强制类型转换将通过截断小数部分来把一个浮点值转换为整型；
    > 枚举类型：有些时候，变量的取值仅在一个有限的集合内
    
3.6 字符串：
    > 从概念上讲，Java字符串就是Unicode字符序列。例如，串“Java\u2122”由5个Unicode字符J、a、v、a和™组成。Java 没有内置的字符串类型，而是在标准
      Java类库中提供了一个预定义类String。每个用双引号括起来的字符串都是String类的一个实例;
    > 3.6.1 代码点与代码单元：
        > 点类型、1个用于表示Unicode编码的字符单元的字符类型char（请参见论述char类型      的章节）和1个用于表示真值的boolean类型;
    > float类型的数值有一个后缀F（例如，3.402F）。没有后缀F的浮点数值（如3.402）默认为double类型;
    > 代码点（code point）是指与一个编码表中的某个字符对应的代码值;

3.4 变量：
    > 初始化变量：声明一个变量之后，必须利用赋值语句对变量进行显式初始化，千万不要使用一个未被初始化的变量；
    > 在Java中可以将声明放在代码中的任何地方; 在Java中，变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格;
    > 常量：在Java中，利用关键字final声明常量；关键字final表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用大写；

3.5 运算符：
    > 在处理整型数值时，可以直接对组成整型数值的各个位进行操作。这意味着可以使用屏蔽技术获得整数中的各个位。位运算符包括:
      &（“与”）、|（“或”）、^（“异或”）、~（“非”); 
      还有“>>”和“<<”运算符，它们将二进制位右移或左移;
      最后，>>> 运算符将用0填充前面的位；>> 运算符用符号位填充左侧的位。没有<<< 运算符;
    > 类型转换：强制类型转换将通过截断小数部分来把一个浮点值转换为整型；
    > 枚举类型：有些时候，变量的取值仅在一个有限的集合内
    
3.6 字符串：
    > 从概念上讲，Java字符串就是Unicode字符序列。例如，串“Java\u2122”由5个Unicode字符J、a、v、a和™组成。Java 没有内置的字符串类型，而是在标准
      Java类库中提供了一个预定义类String。每个用双引号括起来的字符串都是String类的一个实例;
    > 3.6.1 代码点与代码单元：
        > 点类型、1个用于表示Unicode编码的字符单元的字符类型char（请参见论述char类型      的章节）和1个用于表示真值的boolean类型;
    > float类型的数值有一个后缀F（例如，3.402F）。没有后缀F的浮点数值（如3.402）默认为double类型;
    > 代码点（code point）是指与一个编码表中的某个字符对应的代码值;

3.4 变量：
    > 初始化变量：声明一个变量之后，必须利用赋值语句对变量进行显式初始化，千万不要使用一个未被初始化的变量；
    > 在Java中可以将声明放在代码中的任何地方; 在Java中，变量的声明尽可能地靠近变量第一次使用的地方，这是一种良好的程序编写风格;
    > 常量：在Java中，利用关键字final声明常量；关键字final表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用大写；

3.5 运算符：
    > 在处理整型数值时，可以直接对组成整型数值的各个位进行操作。这意味着可以使用屏蔽技术获得整数中的各个位。位运算符包括:
      &（“与”）、|（“或”）、^（“异或”）、~（“非”); 
      还有“>>”和“<<”运算符，它们将二进制位右移或左移;
      最后，>>> 运算符将用0填充前面的位；>> 运算符用符号位填充左侧的位。没有<<< 运算符;
    > 类型转换：强制类型转换将通过截断小数部分来把一个浮点值转换为整型；
    > 枚举类型：有些时候，变量的取值仅在一个有限的集合内
    
3.6 字符串：
    > 从概念上讲，Java字符串就是Unicode字符序列。例如，串“Java\u2122”由5个Unicode字符J、a、v、a和™组成。Java 没有内置的字符串类型，而是在标准
      Java类库中提供了一个预定义类String。每个用双引号括起来的字符串都是String类的一个实例;
    > 3.6.1 代码点与代码单元：
        > Java字符串由char值序列组成。从前面已经看到，char数据类型是一个采用UTF-16编码表示Unicode代码点的代码单元。大多数的常用Unicode字符使用
          一个代码单元就可以表示，而辅助字符需要一对代码单元表示;
    > 3.6.3 字符串编辑：
        > 由于不能修改Java字符串中的字符，所以在Java文档中将String类对象称为不可变字符串;
    > 3.6.6 阅读联机API文档：
        > API文档是JDK的一部分，它是HTML格式的。让浏览器指向安装JDK的docs/api/index.html子目录;
    
    
    
    
    
    
    
    
    
    
    
    
