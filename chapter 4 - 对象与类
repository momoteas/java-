> 很多程序员用UML（unified modeling language）绘制描述类之间关系的类图；
> 在Java中,任何对象变量的值都是对存储在另外一处的一个对象的引用。new操作符的返回值也是一个引用；
> 封装：（encapsulation，有时称为数据隐藏）是与对象有关的一个重要概念。从形式上看，封装不过是将数据和行为结合在一个包中，并对对象的使用者隐藏了数据
  的实现方式。对象中的数据被称为实例域（instance field），操作数据的过程被称为方法（method）。
> 实现封装的关键在于绝对不能让类中的方法直接访问其他类的实例域,但可以访问它自己类的实例域,这一点要反复强调；

4.1.2 对象：
  > 要想使用OOP,一定要清楚对象的三个主要特性:
    • 对象的行为(behavior)—可以对对象施加哪些操作,或可以对对象施加哪些方法?
    • 对象的状态(state)—当施加那些方法时,对象如何响应?
    • 对象的标识(identity)—如何区分具有相同行为与状态的不同对象?
  > 对象状态的改变必须通过调用方法实现；
  
4.1.3 类之间的关系：
  > 在类之间,最常见的关系有
    • 依赖(“uses-a”)
    • 聚合(“has-a”)
    • 继承(“is-a”)
    
4.2.1 对象与对象变量：
  > 要想使用对象,就必须首先构造对象,并指定其初始状态。然后,对对象施加方法；
  > 在Java程序设计语言中,使用构造器(constructor)构造新实例。构造器是一种特殊的方法,用来构造并初始化对象。
  > 构造器的名字应该与类名相同。因此Date类的构造器名为Date。要想构造一个Date对象,需要在构造器前面加上new操作符,如下所示:
      new Date( )
  > 必须首先初始化变量deadline。这里有两个选择。当然可以用新构造的对象初始化这个变量:
      deadline = new Date( );
    或者让这个变量引用一个已存在的对象:
      deadline = birthday;
      
4.2.3 更改器方法与访问器方法：
  > get方法与set和add方法在概念上是有区别的。get方法仅仅查看并返回对象的状态,而set和add方法却对对象的状态进行修改。对实例域做出修改的方法被称为
    更改器方法,仅访问实例域而不加修改的方法被称为访问器方法;
  > 通常的习惯是在访问器方法名前面加上前缀get,在更改器方法前面加上前缀set;
  
4.3 用户自定义类：
  > 




